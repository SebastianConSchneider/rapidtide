#!/usr/bin/env python

import dlfilter as dlfilter

num_epochs = 1
excludethresh = 10.0
window_size = 128
num_layers = 5
num_filters = 10
kernel_size = 5
dropout_rate = 0.3
dofft = False
nettype = 'cnn'
activation = 'relu'
usebadpts = False
countlim = None
readlim = None
num_units = 16
debug = True
invert = True


if nettype == 'cnn':
    num_layers = 5
    thefilter = dlfilter.cnn(
                            num_epochs=num_epochs,
                            excludethresh=excludethresh,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            activation=activation,
                            num_filters=num_filters,
                            kernel_size=kernel_size)
elif nettype == 'lstm':
    num_layers = 2
    thefilter = dlfilter.lstm(
                            num_epochs=num_epochs,
                            excludethresh=excludethresh,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            num_units=num_units)
elif nettype == 'hybrid':
    num_layers = 10
    thefilter = dlfilter.hybrid(
                            num_epochs=num_epochs,
                            excludethresh=excludethresh,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            activation=activation,
                            num_filters=num_filters,
                            kernel_size=kernel_size,
                            num_units=num_units,
                            invert=invert)

thefilter.initialize()
thefilter.loaddata()
thefilter.train()
thefilter.evaluate()
