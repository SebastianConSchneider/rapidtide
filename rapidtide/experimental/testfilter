#!/usr/bin/env python

import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import glob
from scipy import fftpack
import rapidtide.io as tide_io
from keras.models import model_from_json


# handle required args first
if len(sys.argv) != 3:
    print('requires input and output name')
    sys.exit()
fmrifilename = sys.argv[1]
#plethfilename = sys.argv[2]
predfilename = sys.argv[2]

modelname = 'model'

# read in the data
fmridata = tide_io.readvec(fmrifilename)

# Model reconstruction from JSON file
print('reading model')
with open(modelname + '.json', 'r') as f:
    model = model_from_json(f.read())
print('./model read')
model.summary()

# now load weights
model.load_weights('./' + modelname + '_weights.h5')

# now load additional information
print('reading metadata')
model_meta = tide_io.readdictfromjson(modelname + '_meta.json')
print('./model_meta read')
window_size = model_meta['window_size']

scaleddata = fmridata / np.std(fmridata)
predicteddata = scaleddata * 0.0
N_pts = len(scaleddata)
X = np.zeros(((N_pts - window_size - 1), window_size, 1))
for i in range(X.shape[0]):
    X[i, :, 0] = scaleddata[i:i + window_size]
window_size = model_meta['window_size']

Y = model.predict(X)
print('Y.shape', Y.shape)
for i in range(X.shape[0]):
    predicteddata[i:i + window_size] += Y[i, :, 0]
predicteddata /= window_size
tide_io.writevec(predicteddata, predfilename)

plt.figure()
plt.plot(scaleddata)
plt.plot(predicteddata + 2.0)
plt.show()
