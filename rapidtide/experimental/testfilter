#!/usr/bin/env python

from __future__ import print_function, division
import getopt
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import glob
from scipy import fftpack
import rapidtide.io as tide_io
from statsmodels.robust.scale import mad
import rapidtide.dlfilter as dlfilter


def usage():
    print("usage: testfilter inputfile outputfile --model=MODELROOT")
    print("")
    print("required arguments:")
    print("	inputfile                 - the name of a text file containing 25.0Hz raw cardiac signal")
    print("	outputfile                - the name of the output text file")
    print("")
    print("optional arguments:")
    print("	--model=MODELROOT         - use model named MODELROOT (default is model)")

# handle required args first
if len(sys.argv) < 3:
    usage()
    sys.exit()
fmrifilename = sys.argv[1]
predfilename = sys.argv[2]

modelname = 'model'

# now scan for optional arguments
try:
    opts, args = getopt.getopt(sys.argv[3:], "", ["model=", "help"])
except getopt.GetoptError as err:
    # print(help information and exit:
    print(str(err))  # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

for o, a in opts:
    if o == "--model":
        modelname = a
        print('will use', modelname)
    else:
        assert False, "unhandled option"


# read in the data
fmridata = tide_io.readvec(fmrifilename)

# load the filter
thedlfilter = dlfilter.dlfilter()
thedlfilter.loadmodel(modelname)
model = thedlfilter.model
window_size = thedlfilter.window_size
usebadpts = thedlfilter.usebadpts

badpts = None
if usebadpts:
    try:
        badpts = tide_io.readvec(fmrifilename.replace('.txt', '_badpts.txt'))
    except:
        print('bad points file', fmrifilename.replace('.txt', '_badpts.txt'), 'not found!')
        sys.exit() 

predicteddata = thedlfilter.apply(fmridata, badpts=badpts)
tide_io.writevec(predicteddata, predfilename)

plt.figure()
plt.plot(fmridata)
plt.plot(predicteddata)
plt.show()
