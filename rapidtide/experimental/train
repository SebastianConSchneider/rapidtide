#!/usr/bin/env python

import rapidtide.dlfilter as dlfilter
import os

num_epochs = 5
excludethresh = 4.0
window_size = 128
num_layers = 10
num_filters = 10
kernel_size = 5
dropout_rate = 0.3
dofft = False
nettype = 'cnn'
activation = 'relu'
usebadpts = False
countlim = None
readlim = None
readskip = 0
num_units = 128
debug = False
invert = True
startskip = 200
endskip = 200
step = 20
excludebysubject = False

thiscomputer = os.uname().nodename
print('thiscomputer:', thiscomputer)
if thiscomputer.startswith('bbf-tbmbp'):
    print('setting up to run on mac')
    thedatadir = '/Users/frederic/Documents/MR_data/physioconn/timecourses'
elif thiscomputer.startswith('DESKTOP'):
    print('setting up to run on windows bash')
    thedatadir = '/home/frederic/Dropbox/timecourses'
else:
    print('setting up to run on mclean cluster')
    thedatadir = '/data1/frederic/test/output'



if nettype == 'cnn':
    thefilter = dlfilter.cnn(
                            num_epochs=num_epochs,
                            startskip=startskip,
                            endskip=endskip,
                            step=step,
                            excludethresh=excludethresh,
                            excludebysubject=excludebysubject,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            readskip=readskip,
                            countlim=countlim,
                            thedatadir=thedatadir,
                            inputfrag='motfilt_cardfromfmri',
                            targetfrag='motfilt_normpleth',
                            namesuffix='normaligned',
                            activation=activation,
                            num_filters=num_filters,
                            kernel_size=kernel_size,
                            debug=True)
elif nettype == 'lstm':
    num_layers = 2
    thefilter = dlfilter.lstm(
                            num_epochs=num_epochs,
                            startskip=startskip,
                            endskip=endskip,
                            step=step,
                            excludethresh=excludethresh,
                            excludebysubject=excludebysubject,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            readskip=readskip,
                            countlim=countlim,
                            thedatadir=thedatadir,
                            inputfrag='motfilt_cardfromfmri',
                            targetfrag='motfilt_alignedpleth',
                            num_units=num_units)
elif nettype == 'hybrid':
    num_layers = 10
    thefilter = dlfilter.hybrid(
                            num_epochs=num_epochs,
                            startskip=startskip,
                            endskip=endskip,
                            step=step,
                            excludethresh=excludethresh,
                            excludebysubject=excludebysubject,
                            window_size=window_size,
                            num_layers=num_layers,
                            dropout_rate=dropout_rate,
                            usebadpts=usebadpts,
                            readlim=readlim,
                            readskip=readskip,
                            countlim=countlim,
                            thedatadir=thedatadir,
                            inputfrag='motfilt_cardfromfmri',
                            targetfrag='motfilt_alignedpleth',
                            activation=activation,
                            num_filters=num_filters,
                            kernel_size=kernel_size,
                            num_units=num_units,
                            invert=invert)

thefilter.initialize()
thefilter.loaddata()
thefilter.train()
thefilter.evaluate()
