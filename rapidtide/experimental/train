#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 28 23:09:24 2018

@author: neuro
"""

import cnn
import lstm
import gru
import hybrid
import numpy as np
import sys
import os
import json
import rapidtide.io as tide_io

def trainmodel(num_epochs=3,
                excludethresh=4.0,
                window_size=128,
                num_layers=16,
                num_filters=10,
                filter_length=5,
                dropout_rate=0.3,
                dofft=False,
                nettype='cnn',
                activation='relu',
                usebadpts=False,
                num_units=32,
                debug=False,
                readlim=None,
                countlim=None):

    # make the target directory
    modeldir = '.'
    modelname = '_'.join([  'model',
                            'w' + str(window_size),
                            'l' + str(num_layers),
                            'fn' + str(num_filters),
                            'fl' + str(filter_length),
                            'd' + str(dropout_rate),
                            'e' + str(num_epochs),
                            't' + str(excludethresh),
                            activation,
                            nettype])
    if usebadpts:
        modelname += '_usebadpts'
    modelname = os.path.join(modeldir, modelname)

    try:
        os.makedirs(os.path.join(modeldir, modelname))
    except OSError:
        pass

    infodict = {}
    infodict['window_size'] = window_size
    infodict['usebadpts'] = usebadpts
    infodict['dofft'] = dofft
    infodict['nettype'] = nettype
    infodict['lag'] = 0
    infodict['excludethresh'] = excludethresh
    infodict['num_epochs'] = num_epochs
    infodict['num_layers'] = num_layers
    infodict['num_filters'] = num_filters
    infodict['filter_length'] = filter_length
    infodict['dropout_rate'] = dropout_rate
    infodict['train_arch'] = sys.platform
    infodict['modelname'] = modelname
    
    
    thiscomputer = os.uname().nodename
    print('thiscomputer:', thiscomputer)
    if thiscomputer.startswith('bbf-tbmbp'):
        print('setting up to run on mac')
        thedatadir = '/Users/frederic/Documents/MR_data/physioconn/timecourses'
    elif thiscomputer.startswith('DESKTOP'):
        print('setting up to run on windows bash')
        thedatadir = '/home/frederic/Dropbox/timecourses'
    else:
        print('setting up to run on mclean cluster')
        thedatadir = '/data1/frederic/test/output'
    

    # now actually train the network
    if nettype == 'cnn':
        thisloss, thisval_loss, pred_err, raw_err = cnn.cnn(window_size,
                                                               num_layers,
                                                               num_filters,
                                                               filter_length,
                                                               dropout_rate,
                                                               num_epochs,
                                                               thesuffix='25.0Hz',
                                                               dofft=dofft,
                                                               activation=activation,
                                                               excludethresh=excludethresh,
                                                               modelname=modelname,
                                                               usebadpts=usebadpts,
                                                               thedatadir=thedatadir,
                                                               debug=debug,
                                                               readlim=readlim,
                                                               countlim=countlim)

    if nettype == 'hybrid':
        thisloss, thisval_loss, pred_err, raw_err = hybrid.hybrid(window_size,
                                                               num_layers,
                                                               num_filters,
                                                               filter_length,
                                                               dropout_rate,
                                                               num_epochs,
                                                               thesuffix='25.0Hz',
                                                               num_units=num_units,
                                                               dofft=dofft,
                                                               activation=activation,
                                                               excludethresh=excludethresh,
                                                               modelname=modelname,
                                                               usebadpts=usebadpts,
                                                               thedatadir=thedatadir,
                                                               debug=debug,
                                                               readlim=readlim,
                                                               countlim=countlim)

    elif nettype == 'lstm':
        thisloss, thisval_loss, pred_err, raw_err = lstm.lstm(window_size=window_size,
                                                               num_layers=num_layers,
                                                               num_units=num_units,
                                                               filter_length=filter_length,
                                                               dropout_rate=dropout_rate,
                                                               num_epochs=num_epochs,
                                                               thesuffix='25.0Hz',
                                                               excludethresh=excludethresh,
                                                               modelname=modelname,
                                                               thedatadir=thedatadir,
                                                               debug=debug,
                                                               readlim=readlim,
                                                               countlim=countlim)
    elif nettype == 'gru':
        thisloss, thisval_loss, pred_err, raw_err = gru.gru(window_size=window_size,
                                                               num_layers=num_layers,
                                                               num_units=num_units,
                                                               filter_length=filter_length,
                                                               dropout_rate=dropout_rate,
                                                               num_epochs=num_epochs,
                                                               thesuffix='25.0Hz',
                                                               excludethresh=excludethresh,
                                                               modelname=modelname,
                                                               thedatadir=thedatadir,
                                                               debug=debug,
                                                               readlim=readlim,
                                                               countlim=countlim)
    else:
        print('unknown network type:', nettype)
        sys.exit()

    infodict['loss'] = thisloss
    infodict['val_loss'] = thisval_loss
    infodict['raw_error'] = raw_err
    infodict['prediction_error'] = pred_err
    tide_io.writedicttojson(infodict, os.path.join(modelname, 'model_meta.json'))
    
num_epochs = 1
excludethresh = 10.0
thewindow_sizes = [128]
thelayer_nums = [5]
thefilter_nums = [10]
thefilter_lengths = [5]
thedropout_rates = [0.3]
dofft = False
nettype = 'hybrid'
activation = 'relu'
theusebadpts = [False]
countlim = None
readlim = 50
num_units = 16
debug = True

for window_size in thewindow_sizes:
    for num_layers in thelayer_nums:
        for num_filters in thefilter_nums:
            for filter_length in thefilter_lengths:
                for dropout_rate in thedropout_rates:
                    for usebadpts in theusebadpts:
                        # print('layer numbers: ', num_layers,'filter numers: ', num_filters, 'Dropout Prob: ',p, 'window Size: ', window_size)
                        trainmodel(num_epochs=num_epochs,
                                    excludethresh=excludethresh,
                                    window_size=window_size,
                                    num_layers=num_layers,
                                    num_filters=num_filters,
                                    filter_length=filter_length,
                                    dropout_rate=dropout_rate,
                                    dofft=dofft,
                                    nettype=nettype,
                                    activation=activation,
                                    usebadpts=usebadpts,
                                    num_units=num_units,
                                    debug=debug,
                                    readlim=readlim,
                                    countlim=countlim)
