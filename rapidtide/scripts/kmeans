#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/06/14 12:04:50 $
#       $Id: histnifti,v 1.8 2016/06/14 12:04:50 frederic Exp $
#
from __future__ import print_function
import sys
import getopt
import string
import rapidtide.tide_funcs as tide
from sklearn.cluster import KMeans, MiniBatchKMeans

from numpy import r_, zeros, ones, shape, where, sort
from pylab import *

def usage():
    print('usage: kmeans inputfile outputroot')
    print('')
    print('required arguments:')
    print('	inputfile	- the name of the input nifti file')
    print('	outputroot	- the root of the output nifti names')
    print('')
    return()

def progressbar(thisval, end_val, label='Percent', barsize=60):
    percent = float(thisval) / end_val
    hashes = '#' * int(round(percent * barsize))
    spaces = ' ' * (barsize - len(hashes))
    sys.stdout.write('\r{0}: [{1}] {2:.3f}%'.format(label, hashes + spaces, 100.0*percent))
    sys.stdout.flush()

# set default variable values
histlen=101
thepercentiles = [0.95, 0.99, 0.995, 0.999]
thepvalnames = []
for thispercentile in thepercentiles:
    thepvalnames.append(str(1.0 - thispercentile).replace('.', 'p'))

# get the command line parameters
if len(sys.argv) != 3:
    usage()
    exit()

# handle required args first
inputfilename=sys.argv[1]
outputroot=sys.argv[2]

print('loading data')
input_img, input_data, input_hdr, thedims, thesizes = tide.readfromnifti(inputfilename)
tr=thesizes[4]
Fs=1.0/tr
print('tr from header =',tr,', sample frequency is ',Fs)
    
xsize=thedims[1]
ysize=thedims[2]
numslices=thedims[3]
numtrials=thedims[4]
    
numspatiallocs = int(xsize) * int(ysize) * int(numslices)
corr_data = input_data.reshape((numspatiallocs,numtrials))
print('corr_data shape:',corr_data.shape)

print('calculating kmeans')
numclusters = 8
minibatch = True
if minibatch:
    kmeans = MiniBatchKMeans(n_clusters=numclusters).fit(np.nan_to_num(np.transpose(corr_data)))
else:
    kmeans = KMeans(n_clusters=numclusters).fit(np.nan_to_num(np.transpose(corr_data)))

theheader=input_hdr
theheader['dim'][4] = numclusters
theclusters = np.transpose(kmeans.cluster_centers_)
print('clusters shape:',theclusters.shape)
tide.savetonifti(theclusters.reshape((xsize, ysize, numslices, numclusters)), theheader, thesizes, outputroot + '_states')

tide.writenpvecs(kmeans.labels_, outputroot + '_statelabels.txt')
