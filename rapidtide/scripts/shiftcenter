#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/07/11 14:50:43 $
#       $Id: resamplenifti,v 1.19 2016/07/11 14:50:43 frederic Exp $
#

from __future__ import print_function, division
import sys
import getopt
import os
import numpy as np
#import rapidtide.io as tide_io
#import rapidtide.filter as tide_filt
#import rapidtide.resample as tide_resample
import nibabel as nib


def readfromnifti(inputfile):
    r"""Open a nifti file and read in the various important parts

    Parameters
    ----------
    inputfile : str
        The name of the nifti file.

    Returns
    -------
    nim : nifti image structure
    nim_data : array-like
    nim_hdr : nifti header
    thedims : int array
    thesizes : float array

    """
    if os.path.isfile(inputfile):
        inputfilename = inputfile
    elif os.path.isfile(inputfile + '.nii.gz'):
        inputfilename = inputfile + '.nii.gz'
    elif os.path.isfile(inputfile + '.nii'):
        inputfilename = inputfile + '.nii'
    else:
        print('nifti file', inputfile, 'does not exist')
        sys.exit()
    nim = nib.load(inputfilename)
    nim_data = nim.get_data()
    nim_hdr = nim.header.copy()
    thedims = nim_hdr['dim'].copy()
    thesizes = nim_hdr['pixdim'].copy()
    return nim, nim_data, nim_hdr, thedims, thesizes


def savetonifti(thearray, theheader, thename):
    r""" Save a data array out to a nifti file

    Parameters
    ----------
    thearray : array-like
        The data array to save.
    theheader : nifti header
        A valid nifti header
    thepixdim : array
        The pixel dimensions.
    thename : str
        The name of the nifti file to save

    Returns
    -------

    """
    outputaffine = theheader.get_best_affine()
    qaffine, qcode = theheader.get_qform(coded=True)
    if qaffine is not None:
        print(qaffine) 
        qaffine[0, 3] = 0.0
        qaffine[1, 3] = 0.0
        qaffine[2, 3] = 0.0
    saffine, scode = theheader.get_sform(coded=True)
    if saffine is not None:
        print(saffine) 
        saffine[0, 3] = 0.0
        saffine[1, 3] = 0.0
        saffine[2, 3] = 0.0
    if theheader['magic'] == 'n+2':
        output_nifti = nib.Nifti2Image(thearray, outputaffine, header=theheader)
        suffix = '.nii'
    else:
        output_nifti = nib.Nifti1Image(thearray, outputaffine, header=theheader)
        suffix = '.nii.gz'
    output_nifti.set_qform(qaffine, code=int(qcode))
    output_nifti.set_sform(saffine, code=int(scode))
    thedtype = thearray.dtype
    if thedtype == np.uint8:
        theheader.datatype = 2
    elif thedtype == np.int16:
        theheader.datatype = 4
    elif thedtype == np.int32:
        theheader.datatype = 8
    elif thedtype == np.float32:
        theheader.datatype = 16
    elif thedtype == np.complex64:
        theheader.datatype = 32
    elif thedtype == np.float64:
        theheader.datatype = 64
    elif thedtype == np.int8:
        theheader.datatype = 256
    elif thedtype == np.uint16:
        theheader.datatype = 512
    elif thedtype == np.uint32:
        theheader.datatype = 768
    elif thedtype == np.int64:
        theheader.datatype = 1024
    elif thedtype == np.uint64:
        theheader.datatype = 1280
    elif thedtype == np.float128:
        theheader.datatype = 1536
    elif thedtype == np.complex128:
        theheader.datatype = 1792
    elif thedtype == np.complex256:
        theheader.datatype = 2048
    else:
        print('type', thedtype, 'is not legal')
        sys.exit()

    output_nifti.to_filename(thename + suffix)
    output_nifti = None

def usage():
    print("usage: shiftcenter inputname outputname [-a]]")
    print("")
    print("required arguments:")
    print("	inputname	- the name of the input nifti file")
    print("	outputname	- the name of the output nifti file")
    print("")
    print("options:")
    print("	-c		- move the origin to the center of the file")
    return ()


def main():
    # set default variable values
    tocenter = True

    # get the command line parameters
    if (len(sys.argv) < 3) or (len(sys.argv) > 4):
        usage()
        exit()

    # handle required args first
    inputfilename = sys.argv[1]
    outputfilename = sys.argv[2]

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[3:], "a", ["help"])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    input_img, input_data, input_hdr, thedims, thesizes = readfromnifti(inputfilename)
    xoffset = thedims[1] * thesizes[1] / 2.0
    yoffset = thedims[2] * thesizes[2] / 2.0
    zoffset = thedims[3] * thesizes[3] / 2.0

    print('offsets:', xoffset, yoffset, zoffset)

    qaffine, qcode = input_hdr.get_qform(coded=True)
    if qaffine is not None:
        print(qaffine)
        if tocenter:
            qaffine[0, 3] = 0.0
            qaffine[1, 3] = 0.0
            qaffine[2, 3] = 0.0
        else:
            qaffine[0, 3] = xoffset
            qaffine[1, 3] = yoffset
            qaffine[2, 3] = zoffset

    saffine, scode = input_hdr.get_sform(coded=True)
    if saffine is not None:
        print(saffine) 
        if tocenter:
            saffine[0, 3] = 0.0
            saffine[1, 3] = 0.0
            saffine[2, 3] = 0.0
        else:
            saffine[0, 3] = xoffset
            saffine[1, 3] = yoffset
            saffine[2, 3] = zoffset

    output_hdr = input_hdr.copy()
    if qaffine is not None:
        output_hdr.set_qform(qaffine, int(qcode))
    if saffine is not None:
        output_hdr.set_sform(saffine, int(scode))

    savetonifti(input_data, output_hdr, outputfilename)

if __name__ == '__main__':
    main()

