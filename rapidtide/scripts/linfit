#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/06/14 12:04:50 $
#       $Id: linfit,v 1.4 2016/06/14 12:04:50 frederic Exp $
#
from __future__ import print_function, division
import sys
import getopt
import string
import platform
import rapidtide.tide_funcs as tide

from numpy import r_, zeros, ones, shape, where, mean, std, shape, nan_to_num
from pylab import *
import nibabel as nib

def usage():
    print("usage: linfit datafile datamask templatefile templatmask outputroot")
    print("")
    print("required arguments:")
    print("	datafile	- the name of the 3D or 4D nifti file to fit")
    print("	datamask	- the name of the 3D or 4D nifti file valid voxel mask (must match datafile)")
    print("	templatefile	- the name of the 3D nifti template file")
    print("	templatemask	- the name of the 3D nifti template mask")
    print("	outputroot	- the root name of the output nifti files")
    print("")
    return()

# set default variable values
usemask=True
extmask=False

# get the command line parameters
if len(sys.argv) < 6:
    usage()
    exit()

# handle required args first
datafilename=sys.argv[1]
datamaskname=sys.argv[2]
templatefilename=sys.argv[3]
templatemaskname=sys.argv[4]
outputrootname=sys.argv[5]

# now scan for optional arguments
try:
    opts, args = getopt.getopt(sys.argv[6:], "", ["help"])
except getopt.GetoptError as err:
    # print(help information and exit:
    print(str(err)) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

for o, a in opts:
    if o == "-m":
        usemask = False
        extmask = False
        print('not masking data')
    elif o == "-M":
        usemask = True
        extmask = True
        maskname=a
        print('using external mask ',maskname)
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    else:
        assert False, "unhandled option"

# read in data
print("reading in data arrays")
datafile_img = nib.load(datafilename)
datafile_data = datafile_img.get_data()
datafile_hdr = datafile_img.get_header()
datafiledims = datafile_hdr['dim']
datafilesizes = datafile_hdr['pixdim']

datamask_img = nib.load(datamaskname)
datamask_data = datamask_img.get_data()
datamask_hdr = datamask_img.get_header()
datamaskdims = datamask_hdr['dim']
datamasksizes = datamask_hdr['pixdim']

templatefile_img = nib.load(templatefilename)
templatefile_data = templatefile_img.get_data()
templatefile_hdr = templatefile_img.get_header()
templatefiledims = templatefile_hdr['dim']
templatefilesizes = templatefile_hdr['pixdim']

templatemask_img = nib.load(templatemaskname)
templatemask_data = templatemask_img.get_data()
templatemask_hdr = templatemask_img.get_header()
templatemaskdims = templatemask_hdr['dim']
templatemasksizes = templatemask_hdr['pixdim']

xsize=datafiledims[1]
ysize=datafiledims[2]
numslices=datafiledims[3]
timepoints=datafiledims[4]
    
# check dimensions
print("checking dimensions")
if not tide.checkspacematch(datafiledims, datamaskdims):
    print('input mask spatial dimensions do not match image')
    exit()
if not tide.checktimematch(datafiledims, datamaskdims, 0, 0):
    print('input mask time dimension does not match image')
    exit()
if not tide.checkspacematch(datafiledims, templatefiledims):
    print(thedims, 'template file spatial dimensions do not match image')
    exit()
if not templatefiledims[4] == 1:
    print('template file time dimension is not equal to 1')
    exit()
if not tide.checkspacematch(datafiledims, templatemaskdims):
    print('template mask spatial dimensions do not match image')
    exit()
if not templatemaskdims[4] == 1:
    print('template mask time dimension is not equal to 1')
    exit()

# allocating arrays
print("allocating arrays")
numspatiallocs = int(xsize) * int(ysize) * int(numslices)
rs_datafile = datafile_data.reshape((numspatiallocs, timepoints))
rs_datamask = datamask_data.reshape((numspatiallocs, timepoints))
bin_datamask = where(rs_datamask > 0.9, 1.0, 0.0)
rs_templatefile = templatefile_data.reshape((numspatiallocs))
rs_templatemask = templatemask_data.reshape((numspatiallocs))
bin_templatemask = where(rs_templatemask > 0.1, 1.0, 0.0)

fitdata = zeros((numspatiallocs, timepoints),dtype='float')
residuals = zeros((numspatiallocs, timepoints),dtype='float')
newtemplate = zeros((numspatiallocs),dtype='float')
newmask = zeros((numspatiallocs),dtype='float')
lincoffs = zeros((timepoints),dtype='float')
offsets = zeros((timepoints),dtype='float')
rvals = zeros((timepoints),dtype='float')

# mask everything
print('masking data and template')
maskeddata = rs_datafile * bin_datamask
maskedtemplate = rs_templatefile * bin_templatemask

# cycle over all images
print("now cycling over all images")
for thetime in range(0,timepoints):
    thefit, R = tide.mlregress(maskedtemplate, maskeddata[:, thetime])
    lincoffs[thetime] = thefit[0, 1]
    offsets[thetime] = thefit[0, 0]
    rvals[thetime] = R
    fitdata[:, thetime] = lincoffs[thetime] * maskedtemplate * bin_datamask[:, thetime]
    newtemplate += nan_to_num(maskeddata[:, thetime]/ lincoffs[thetime]) * rs_datamask[:, thetime]
    newmask += rs_datamask[:, thetime] * bin_templatemask
residuals = rs_datafile - fitdata
    
# write out the data files
print("writing time series")
tide.writenpvecs(lincoffs, outputrootname + '_lincoffs.txt')
tide.writenpvecs(offsets, outputrootname + '_offsets.txt')
tide.writenpvecs(rvals, outputrootname + '_rvals.txt')
print("slope mean, std:", mean(lincoffs), std(lincoffs))
print("offset mean, std:", mean(offsets), std(offsets))

print("writing nifti series")
tide.savetonifti(fitdata.reshape((xsize, ysize, numslices, timepoints)), datafile_hdr, datafilesizes, outputrootname + '_fit')
tide.savetonifti(residuals.reshape((xsize, ysize, numslices, timepoints)), datafile_hdr, datafilesizes, outputrootname + '_residuals')
newtemplate = where(newmask > 0, newtemplate / newmask, 0.0)
tide.savetonifti(newtemplate.reshape((xsize, ysize, numslices)), templatefile_hdr, templatefilesizes, outputrootname + '_newtemplate')
