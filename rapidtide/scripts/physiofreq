#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2020 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
import os
import argparse
import numpy as np
from scipy.signal import welch, savgol_filter
import matplotlib.pyplot as plt
import rapidtide.io as tide_io
import rapidtide.filter as tide_filt
import rapidtide.miscmath as tide_math

def parsearglist():
    parser = argparse.ArgumentParser(description='Finds the dominant frequency in a cardiac or respiratory waveform.')
    parser.add_argument('textfilename',
                        help='A text input files, with optional column specification')
    parser.add_argument('--display',
                        dest='display',
                        action='store_false',
                        help='display the fit spectrum')
    parser.add_argument('--samplerate',
                        dest='samplerate',
                        type=float,
                        default=1.0,
                        help='sample rate of the waveform in Hz')
    parser.add_argument('--lowestbpm',
                        dest='lowestbpm',
                        type=float,
                        default=6.0,
                        help='Lowest allowable frequency in cycles per minute')
    parser.add_argument('--highestbpm',
                        dest='highestbpm',
                        type=float,
                        default=20.0,
                        help='Highest allowable frequency in cycles per minute')

    args = parser.parse_args()

    return args

def savgolsmooth(data, smoothlen=101, polyorder=3):
    return savgol_filter(data, smoothlen, polyorder)


def getwavefreq(thewaveform, thesamplerate, minpermin=40.0, maxpermin=140.0, smoothlen=101, debug=False, display=False):
    if len(thewaveform) > 1024:
        thex, they = welch(thewaveform, thesamplerate, nperseg=1024)
    else:
        thex, they = welch(thewaveform, thesamplerate)
    initpeakfreq = np.round(thex[np.argmax(they)] * 60.0, 2)
    if initpeakfreq > maxpermin:
        initpeakfreq = maxpermin
    if initpeakfreq < minpermin:
        initpeakfreq = minpermin
    if debug:
        print('initpeakfreq:', initpeakfreq, 'BPM')
    freqaxis, spectrum = tide_filt.spectrum(tide_filt.hamming(len(thewaveform)) * thewaveform,
                                            Fs=thesamplerate,
                                            mode='complex')
    # remove any spikes at zero frequency
    minbin = int(minpermin // (60.0 * (freqaxis[1] - freqaxis[0])))
    maxbin = int(maxpermin // (60.0 * (freqaxis[1] - freqaxis[0])))
    spectrum[:minbin] = 0.0
    spectrum[maxbin:] = 0.0

    # find the max
    ampspec = savgolsmooth(np.abs(spectrum), smoothlen=smoothlen)
    peakfreq = freqaxis[np.argmax(ampspec)]
    if display:
        figure()
        plot(freqaxis, ampspec, 'k')
        plot([peakfreq, peakfreq], [np.min(ampspec), np.max(ampspec)], 'r-', lw=2)
        show()
    if debug:
        print('the fundamental frequency is', np.round(peakfreq * 60.0, 2), 'BPM')
    normfac = np.sqrt(2.0) * tide_math.rms(thewaveform)
    if debug:
        print('normfac:', normfac)
    return peakfreq

def main():
    theargs = parsearglist()
    textfileinfo = theargs.textfilename.split(':')
    filebase, extension = os.path.splitext(textfileinfo[0])
    if extension == '.json':
        thissamplerate, thisstartoffset, colnames, invec = tide_io.readbidstsv(textfileinfo[0])
    else:
        invec = tide_io.readvecs(textfileinfo[0])[0]
        thissamplerate = theargs.samplerate
        thisstartoffset = 0.0
        colnames = None
    peakfreq = getwavefreq(invec, thissamplerate, minpermin=theargs.lowestbpm, maxpermin=theargs.highestbpm, display=theargs.display)
    print(textfileinfo[0] + ':\t' + "%.2f" % peakfreq + ' Hz, ' + "%.2f" % (peakfreq * 60.0) + ' per minute, period is ' + "%.2f" % (1.0 / peakfreq), 'seconds')


if __name__ == '__main__':
    main()
