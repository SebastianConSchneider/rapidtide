#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
#       $Date: 2016/07/11 14:50:43 $
#       $Id: showtc,v 1.16 2016/07/11 14:50:43 frederic Exp $
#
from __future__ import print_function
import sys
import os
import platform
import getopt
from cycler import cycler

import matplotlib
import matplotlib.cm as cm

import bisect
import rapidtide.tide_funcs as tide
import numpy as np
from scipy import arange, fftpack

from pylab import figure, plot, legend, show, xlabel, ylabel, savefig, title, subplot, tight_layout, suptitle, xlim, ylim, box, setp


def phase(mcv): 
    return np.arctan2(mcv.imag, mcv.real) 


def usage():
    print("showtc - plots the data in text files")
    print("")
    print("usage: showtc texfilename[:col1,col2...,coln] [textfilename]... [--nolegend] [--pspec] [--phase] [--samplerate=Fs] [--sampletime=Ts]")
    print("")
    print("required arguments:")
    print("    textfilename	- a text file containing whitespace separated timecourses, one timepoint per line")
    print("                       A list of comma separated numbers following the filename and preceded by a colon is used to select columns to plot")
    print("")
    print("optional arguments:")
    print("    --nolegend               - turn off legend label")
    print("    --pspec                  - show the power spectra magnitudes of the input data instead of the timecourses")
    print("    --phase                  - show the power spectra phases of the input data instead of the timecourses")
    print("    --transpose              - swap rows and columns in the input files")
    print("    --waterfall              - plot multiple timecourses as a waterfall")
    print("    --voffset=VOFFSET        - plot multiple timecourses as with VOFFSET between them (use negative VOFFSET to set automatically)")
    print("    --samplerate=Fs          - the sample rate of the input data is Fs Hz (default is 1Hz)")
    print("    --sampletime=Ts          - the sample time (1/samplerate) of the input data is Ts seconds (default is 1s)")
    print("    --colorlist=C1,C2,..     - cycle through the list of colors specified by CN")
    print("    --linewidth=LW           - set linewidth to LW points (default is 1)")
    print("    --legendlist=L1,L2,..    - cycle through the list of legends specified by LN")
    print("    --tofile=FILENAME        - write figure to file FILENAME instead of displaying on the screen")
    print("    --title=TITLE            - use TITLE as the overall title of the graph")
    print("    --separate               - use a separate subplot for each timecourse")
    print("    --separatelinked         - use a separate subplot for each timecourse, but use a common y scaling")
    print("    --noxax                  - don't show x axis")
    print("    --noyax                  - don't show y axis")
    print("    --starttime=START        - start plot at START seconds")
    print("    --endtime=END            - end plot at END seconds")
    return ()

# set default variable values
dolegend = True
dotranspose = False
dowaterfall = False
dopspec = False
detrend = True
useHamming = True
domag = True
samplerate = 1.0
voffset = 0.0
colornames = []
outputfile = None
thetitle = None
legendset = False
legendlist = []
separate = False
linky = True
thelinewidth = 1.0
showxax = True
showyax = True
thestartpoint = 0
theendpoint = 100000000
thestarttime = -1000000.0
theendtime = 1000000.0

# get the command line parameters
try:
    opts, args = getopt.gnu_getopt(sys.argv, "F", ["help", "nolegend", "pspec", "phase", "transpose", "waterfall", "voffset=", "noxax", "noyax",
                                                   "starttime=", "endtime=",
                                                   "samplerate=", "colorlist=", "linewidth=", "legendlist=", "title=", "separatelinked", "separate", "sampletime=", "tofile="])
except getopt.GetoptError as err:
    # print help information and exit:
    print(str(err))  # will print something like 'option -a not recognized'
    usage()
    sys.exit(2)

# check for filename arguments
nargs = len(args)
if nargs < 2:
    usage()
    sys.exit(1)

# now parse options
for o, a in opts:
    linkchar = ' '
    if o == "--nolegend":
        dolegend = False
        print('turning off legend label')
    elif o == '--separate':
        separate = True
        linky = False
        print('put each plot in a separate window')
    elif o == '--separatelinked':
        separate = True
        linky = True
        print('put each plot in a separate window, with the same y scale')
    elif o == '--pspec':
        dopspec = True
        domag = True
        print('showing power spectra magnitude')
    elif o == '--tofile':
        outputfile = a
        print('Writing output to file', outputfile)
    elif o == '--legendlist':
        legendset = True
        for thislegend in a.split(','):
            legendlist.append(thislegend)
        print('Colors used:', colornames)
    elif o == '--starttime':
        thestarttime = float(a)
        print('Start time set to:', thestarttime)
    elif o == '--endtime':
        theendtime = float(a)
        print('End time set to:', theendtime)
    elif o == '--linewidth':
        thelinewidth = float(a)
        print('Linewidth set to:', thelinewidth)
    elif o == '--colorlist':
        for thiscolor in a.split(','):
            colornames.append(thiscolor)
        print('Colors used:', colornames)
    elif o == '--phase':
        dopspec = True
        domag = False
        print('showing power spectra phase')
    elif o == '--noyax':
        showyax = False
        print('will not show y axis')
    elif o == '--noxax':
        showxax = False
        print('will not show x axis')
    elif o == '--waterfall':
        dowaterfall = True
        print('making a waterfall plot')
    elif o == '--transpose':
        dotranspose = True
        print('transposing input data')
    elif o == '--samplerate':
        samplerate = float(a)
        linkchar = '='
        print('Samplerate set to ', samplerate)
    elif o == '--title':
        thetitle = a
        linkchar = '='
        print('Will use title', thetitle)
    elif o == '--voffset':
        voffset = float(a)
        linkchar = '='
        print('Vertical offset set to ', voffset)
    elif o == '--sampletime':
        samplerate = 1.0 / float(a)
        linkchar = '='
        print('Samplerate set to ', samplerate)
    elif o == '-F':
        print('got the -F option')
    elif o in ('-h', '--help'):
        usage()
        sys.exit()
    else:
        assert False, 'unhandled option'

# check range
if thestarttime >= theendtime:
    print('endtime must be greater then starttime;')
    sys.exit()

# handle required args first
textfilename = []
xvecs = []
yvecs = []
linelabels = []
samplerates = []
numfiles = 1
numvecs = 0
textfilename.append(args[1].split(':'))
if nargs > 2:
    for i in range(2, nargs):
        numfiles += 1
        textfilename.append(args[i].split(':'))

minlen = 100000000
shortcolnames = True
# read in all the data
for i in range(0, numfiles):
    print('filename ', i, textfilename[i])
    
    # check file type
    filebase, extension = os.path.splitext(textfilename[i][0])
    if extension == '.json':
        thissamplerate, thisstartoffset, colnames, invecs = tide.readbidstsv(textfilename[i][0])
    else:
        invecs = tide.readvecs(textfilename[i][0])
        thissamplerate = samplerate
        thisstartoffset = 0.0
        colnames = []
    if dotranspose:
        invecs = np.transpose(invecs)
    print('   ', invecs.shape[0], ' columns')
    if len(textfilename[i]) == 2:
        collist = []
        for column in (textfilename[i][1]).split(','):
            collist.append(int(column))
    else:
        collist = range(0, invecs.shape[0]) 
    #for j in range(0, invecs.shape[0]):
    for j in collist:
        print('appending vector number ', j)
        if dopspec:
            if invecs.shape[1] % 2 == 1:
                invec = invecs[j, :-1]
            else:
                invec = invecs[j, :]
            if detrend:
                invec = tide.detrend(invec, order=1, demean=True)
            elif demean:
                invec = invec = mean(invec)
            if useHamming:
                pspec = fftpack.fft(tide.hamming(len(invec)) * invec)[0:len(invec) // 2]
            else:
                pspec = fftpack.fft(invec)[0:len(invec) // 2]
            if domag:
                yvecs.append(abs(pspec) * 1.0)
            else:
                yvecs.append(phase(pspec) * 1.0)
            maxfreq = thissamplerate / 2.0
            xvecs.append(arange(0.0, maxfreq, maxfreq / (len(yvecs[i]))))
        else:
            yvecs.append(invecs[j] * 1.0)
            xvecs.append(thisstartoffset + arange(0.0, len(yvecs[numvecs]), 1.0) / thissamplerate)
        if len(yvecs[-1]) < minlen:
            minlen = len(yvecs[-1])
        if not legendset:
            if invecs.shape[0] > 1:
                if colnames is None:
                    if shortcolnames:
                        linelabels.append('column' + str(j).zfill(2))
                    else:
                        linelabels.append(textfilename[i][0] + '_column' + str(j).zfill(2))

                else:
                    if shortcolnames:
                        linelabels.append(colnames[j])
                    else:
                        linelabels.append(textfilename[i][0] + '_' + colnames[j])
            else:
                linelabels.append(textfilename[i][0])
        else:
            if invecs.shape[0] > 1:
                linelabels.append(legendlist[i % len(legendlist)] + '_column' + str(j).zfill(2))
            else:
                linelabels.append(legendlist[i % len(legendlist)])
        samplerates.append(thissamplerate + 0.0)
        numvecs += 1

thestartpoint = np.max([0, bisect.bisect_right(xvecs[0], thestarttime)])
theendpoint = np.min([minlen - 1, bisect.bisect_left(xvecs[0], theendtime)])
thestarttime = xvecs[0][thestartpoint]
theendtime = xvecs[0][theendpoint]
#print('full range (pts):',thestartpoint, theendpoint)
#print('full range (time):',thestarttime, theendtime)
currentxmax = -100000000.0
currentxmin = 100000000.0    
for thevec in xvecs:
    currentxmax = np.max([np.max(thevec), currentxmax])
    currentxmin = np.min([np.min(thevec), currentxmin])
xrange = (np.min([currentxmin, theendtime]), np.max([currentxmax, thestarttime]))
ymins = [] 
ymaxs = []
for thevec in yvecs:
    ymins.append(np.min(np.asarray(thevec[thestartpoint:theendpoint], dtype='float')))
    ymaxs.append(np.max(np.asarray(thevec[thestartpoint:theendpoint], dtype='float')))
currentymax = -100000000.0
currentymin = 100000000.0    
for thevec in xvecs:
    currentymax = np.max([np.max(thevec), currentymax])
    currentymin = np.min([np.min(thevec), currentymin])
yrange = (currentymin,  currentymax)
if voffset < 0.0:
    voffset = yrange[1] - yrange[0]
if not separate:
    for i in range(0, numvecs):
        yvecs[i] += (numvecs - i - 1) * voffset
    currentymax = -100000000.0
    currentymin = 100000000.0    
    for thevec in yvecs:
        currentymax = np.max([np.max(thevec), currentymax])
        currentymin = np.min([np.min(thevec), currentymin])
    yrange = (currentymin,  currentymax)

    if dowaterfall:
        xstep = (xrange[1] - xrange[0])/numvecs
        ystep = yrange[1] - yrange[0]
        for i in range(numvecs):
            xvecs[i] = xvecs[i] + i * xstep
            yvecs[i] = 10.0 * yvecs[i]/ystep + i * ystep

# now plot it out
if separate:
    thexaxfontsize = 6
    theyaxfontsize = 6
    thexlabelfontsize = 4
    theylabelfontsize = 4
    thelegendfontsize = 6
    thetitlefontsize = 6
    thesuptitlefontsize = 10
else:
    thexaxfontsize = 10
    theyaxfontsize = 10
    thexlabelfontsize = 10
    theylabelfontsize = 10
    thelegendfontsize = 8
    thetitlefontsize = 10
    thesuptitlefontsize = 10

if len(colornames) > 0:
    colorlist = [colornames[i % len(colornames)] for i in range(numvecs)]
else:
    colorlist = [cm.rainbow(float(i) / numvecs) for i in range(numvecs)]

fig = figure()
if separate:
    if thetitle is not None:
        fig.suptitle(thetitle, fontsize=thesuptitlefontsize)
    if linky:
        axlist = fig.subplots(numvecs, sharex=True, sharey=True)[:]
    else:
        axlist = fig.subplots(numvecs, sharex=True, sharey=False)[:]
else:
    ax = fig.add_subplot(1, 1, 1)
    if thetitle is not None:
        ax.set_title(thetitle, fontsize=thetitlefontsize)

for i in range(0, numvecs):
    if separate:
        ax = axlist[i]
    ax.plot(xvecs[i], yvecs[i], color=colorlist[i], label=linelabels[i], linewidth=thelinewidth)
    if dolegend:
        ax.legend(fontsize=thelegendfontsize, loc=2)
    ax.set_xlim(xrange)
    if linky:
        print(yrange)
        ax.set_ylim(yrange)
    else:
        themax = np.max(yvecs[i])
        themin = np.min(yvecs[i])
        thediff = themax - themin
        print(themin, themax, thediff)
        ax.set_ylim(top=(themax + thediff / 20.0), bottom=(themin - thediff / 20.0))
    if showxax:
        ax.tick_params(axis='x', labelsize=thexlabelfontsize, which='both')
    if showyax:
        ax.tick_params(axis='y', labelsize=theylabelfontsize, which='both')
    #box(on=None)
    #ax.xaxis.set_visible(showxax)
    #ax.yaxis.set_visible(showyax)

    if separate:
        fig.subplots_adjust(hspace=0)
        setp([a.get_xticklabels() for a in fig.axes[:-1]], visible=False)

    if dopspec:
        if showxax:
            ax.set_xlabel('Frequency (Hz)', fontsize=thexlabelfontsize, fontweight='bold')
        if domag:
            if showyax:
                ax.set_ylabel('Signal power', fontsize=theylabelfontsize, fontweight='bold')
        else:
            if showyax:
                ax.set_ylabel('Signal phase', fontsize=theylabelfontsize, fontweight='bold')
    else:
        if showxax:
            ax.set_xlabel('Time (s)', fontsize=thexlabelfontsize, fontweight='bold')



#fig.tight_layout()

if outputfile is None:
    show()
else:
    savefig(outputfile, bbox_inches='tight')
