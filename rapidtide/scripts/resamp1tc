#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
# $Date: 2016/07/11 14:50:43 $
#       $Id: resamp1tc,v 1.12 2016/07/11 14:50:43 frederic Exp $
#

from __future__ import print_function, division

import sys
import getopt

import rapidtide.io as tide_io
import rapidtide.resample as tide_resample
from scipy import arange
from numpy import max, floor
import pylab as plt


def usage():
    print("resamp1tc - resample a timeseries file")
    print("")
    print("usage: resamp1tc infilename insamplerate outputfile outsamplerate [--nodisplay]")
    print("")
    print("required arguments:")
    print("	inputfile	- the name of the input text file")
    print("	insamplerate	- the sample rate of the input file in Hz")
    print("	outputfile	- the name of the output text file")
    print("	outsamplerate	- the sample rate of the output file in Hz")
    print("")
    print(" options:")
    print("     --nodisplay     - do not plot the data (for noninteractive use)")
    print("")
    return ()


def main():
    display = True

    # get the command line parameters
    nargs = len(sys.argv)
    if nargs < 5:
        usage()
        exit()
    filename = sys.argv[1]
    insamplerate = float(sys.argv[2])
    outputfile = sys.argv[3]
    outsamplerate = float(sys.argv[4])

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[5:], "s", ["nodisplay", "help"])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -x not recognized"
        usage()
        sys.exit(2)
    
    for o, a in opts:
        if o == "--nodisplay":
            display = False
            print('turning display off')
        else:
            assert False, "unhandled option"

    intimestep = 1.0 / insamplerate
    outtimestep = 1.0 / outsamplerate
    inputdata = tide_io.readvec(filename)
    totaltime = intimestep * len(inputdata)
    numoutpoints = floor(totaltime / outtimestep) + 1

    in_t = arange(0.0, totaltime, intimestep)
    out_t = arange(0.0, outtimestep * numoutpoints, outtimestep)
    outputdata = tide_resample.doresample(in_t, inputdata, out_t, method='cubic')
    IF = max([60.0, 2.0 * insamplerate])
    if outsamplerate < insamplerate:
        outputdata2 = tide_resample.dotwostepresample(in_t, inputdata, IF, outsamplerate)
        outputdata3 = tide_resample.arbresample(inputdata, insamplerate, outsamplerate)
        print(len(out_t), len(outputdata2))
        if len(out_t) < len(outputdata2):
            outputdata2 = outputdata2[0:len(out_t)]

    if display:
        plt.plot(in_t, inputdata + 0.4, 'k')

    tide_io.writevec(outputdata, outputfile)
    tide_io.writevec(outputdata, outputfile + '_dual')
    if display:
        plt.plot(out_t, outputdata - 0.4, 'r')
        if outsamplerate < insamplerate:
            plt.plot(out_t, outputdata2 - 0.8, 'g', out_t, outputdata3 - 1.2, 'b')
            plt.legend(('original signal', 'resampled', 'dualresampled'))
        else:
            plt.legend(('original signal', 'resampled'))

    if display:
        plt.show()

if __name__ == '__main__':
    main()
