#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#
#       $Author: frederic $
#       $Date: 2015/03/06 14:12:29 $
#       $Id: preprocess_spo2.py,v 1.1 2015/03/06 14:12:29 frederic Exp $
#
from __future__ import print_function

import sys
import time

import glob
import getopt
import platform
import os
import subprocess

fsldir = os.environ.get('FSLDIR')
if fsldir is not None:
    fslsubcmd = os.path.join(fsldir, 'bin', 'fsl_sub')
    flirtcmd = os.path.join(fsldir,'bin', 'flirt')
    applywarpcmd = os.path.join(fsldir,'bin', 'applywarp')
else:
    print('FSL directory not found - aborting')
    sys.exit()

def makethecmd(theinputfile, reftarget, xform, outputname, warpfile=None):
    thecommand = []
    if warpfile is None:
        print('doing linear transformation')
        thecommand.append(fslsubcmd)
        thecommand.append(flirtcmd)
        thecommand.append('-in')
        thecommand.append(theinputfile)
        thecommand.append('-ref')
        thecommand.append(reftarget)
        thecommand.append('-applyxfm')
        thecommand.append('-init')
        thecommand.append(xform)
        thecommand.append('-out')
        thecommand.append(outputname)
    else:
        print('doing nonlinear transformation')
        thecommand.append(fslsubcmd)
        thecommand.append(applywarpcmd)
        thecommand.append('--ref=' + reftarget)
        thecommand.append('--in=' + theinputfile)
        thecommand.append('--out=' + outputname)
        thecommand.append('--warp=' + warpfile)
    return(thecommand)

def usage():
    print('rapidtide2std:  register rapidtide output maps to standard space')
    print('')
    print('usage: rapidtide2std INPUTFILEROOT OUTPUTDIR FEATDIRECTORY [--all] [--hires]')
    print('')
    print('required arguments:')
    print('    INPUTFILEROOT      - The base name of the rapidtide maps up to but not including the underscore')
    print('    OUTPUTDIR          - The location for the output files')
    print('    FEADDIRECTORY      - A feat directory (x.feat) where registration to standard space has been performed')
    print('')
    print("optional arguments:")
    print("    --all              - also transform the corrout file (warning - file may be huge)")
    print("    --hires            - transform to match the high resolution anatomic image rather than the standard")
    print("    --linear           - only do linear transformation, even if warpfile exists")


##########################################################################################
##########################################################################################
#
# control flow starts here
#
##########################################################################################
##########################################################################################

# option control
do4Dmaps = False
aligntohires = False
forcelinear = False

# get the command line parameters
try:
    opts, args = getopt.gnu_getopt(sys.argv, "F", ["help", "all", "hires", "linear"])
except getopt.GetoptError as err:
    # print help information and exit:
    print(str(err))  # will print something like 'option -a not recognized'
    usage()
    sys.exit(2)

# check for filename arguments
nargs = len(args)
if nargs < 4:
    usage()
    sys.exit(1)

# now parse options
for o, a in opts:
    linkchar = ' '
    if o == "--all":
        do4Dmaps = True
        print('will also transofrm corrout map')
    elif o == '--linear':
        forcelinear = True
        print('forcing linear transformation')
    elif o == '--hires':
        aligntohires = True
        print('transforming to hires anatomic instead of MNI152')
    elif o in ('-h', '--help'):
        usage()
        sys.exit()
    else:
        assert False, 'unhandled option'

fileroot = args[1]
outputdir = args[2]
featdir = args[3]

theoutputdir = os.path.join(os.path.abspath('.'), outputdir)
thefileroot = glob.glob(os.path.join(fileroot + '*corrout.nii.gz'))[0]

thefmrimaps = ['lagtimes', 'lagstrengths', 'lagsigma', 'lagmask', 'R2', 'fitNorm', 'fitcoff', 'p_lt_0p050_mask', 'p_lt_0p010_mask', 'p_lt_0p005_mask', 'p_lt_0p001_mask']

if do4Dmaps:
    thefmrimaps.append('corrout')
preponly = False

absname = os.path.abspath(thefileroot)
thepath, thebase = os.path.split(absname)
theprevpath,theprevbase = os.path.split(thepath)
subjroot = thebase[:-15]

# make sure the appropriate transformation matrix and targets exist
if aligntohires:
    reftarget = os.path.abspath(os.path.join(featdir,
        'reg','highres.nii.gz'))
    warpfuncfile=''
    xformfuncmat = os.path.abspath(os.path.join(featdir,
        'reg','example_func2highres.mat'))
    outputtag = '_hires_'
    theanatmaps = ['highres']
else:
    xformfuncmat = os.path.abspath(os.path.join(featdir,
        'reg','example_func2standard.mat'))
    warpfuncfile = os.path.abspath(os.path.join(featdir,
        'reg','example_func2standard_warp.nii.gz'))
    reftarget = os.path.join(fsldir, 'data', 'standard', 'MNI152_T1_2mm.nii.gz')
    outputtag = '_std_'
    theanatmaps = ['highres', 'standard']

if forcelinear:
    warpfuncfile += "ridiculous_suffix" 

if os.path.isfile(xformfuncmat):
    if os.path.isfile(reftarget):
        print('found alignment files - proceeding')
    else:
        print('cannot find reference file', reftarget, ' - exiting')
        sys.exit(1)
    if os.path.isfile(warpfuncfile):
        print('found warp file - will do nonlinear transformation')
    else:
        print('no warp file found - will do linear transformation')
        warpfuncfile = None
else:
    print('cannot find transform matrix', xfomrmat, ' - exiting')
    sys.exit(1)
    
for themap in thefmrimaps:
    inputname = os.path.abspath(os.path.join(thepath, subjroot + '_' + themap + '.nii.gz'))
    outputname = os.path.abspath(os.path.join(theoutputdir,subjroot + outputtag + themap + '.nii.gz'))
    thecommand = makethecmd(inputname, reftarget, xformfuncmat, outputname, warpfile=warpfuncfile)

    if preponly:
        print(" ".join(thecommand))
    else:
        subprocess.call(thecommand)

for themap in theanatmaps:
    inputname = os.path.abspath(glob.glob(os.path.join(featdir,
        'reg',themap + '.nii.gz'))[0])
    outputname = os.path.abspath(os.path.join(theoutputdir,subjroot + outputtag + themap.replace('standard','anat') + '.nii.gz'))
    if aligntohires:
        thecommand = ['cp', inputname, outputname]
    else:
        xform = os.path.abspath(glob.glob(os.path.join(featdir,
            'reg','highres2standard.mat'))[0])
        thecommand = makethecmd(inputname, reftarget, xform, outputname)

    if preponly:
        print(" ".join(thecommand))
    else:
        subprocess.call(thecommand)
