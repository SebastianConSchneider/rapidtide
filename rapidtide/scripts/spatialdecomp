#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/06/14 12:04:50 $
#       $Id: linfit,v 1.4 2016/06/14 12:04:50 frederic Exp $
#
from __future__ import print_function, division
import sys
import getopt
import string
import platform
import rapidtide.tide_funcs as tide

from numpy import r_, zeros, ones, shape, where, mean, std, shape, nan_to_num
from pylab import *
import nibabel as nib
from sklearn.decomposition import FastICA, PCA

def usage():
    print("usage: spatialdecomp datafile outputroot [--dmask=DATAMASK] [--ncomp=NCOMPS] [--smooth=SIGMA] [--type=TYPE]")
    print("")
    print("required arguments:")
    print("	datafile	- the name of the 3 or 4 dimensional nifti file to fit")
    print("	outputroot	- the root name of the output nifti files")
    print("")
    print("optional arguments:")
    print("	--dmask=DATAMASK   - use DATAMASK to specify which voxels in the data to use")
    print("	--ncomp=NCOMPS     - the number of PCA/ICA components to return (default is to estimate the number")
    print("	--smooth=SIGMA     - spatially smooth the input data with a SIGMA mm kernel")
    print("	--type=TYPE        - type of decomposition to perform, 'pca' or 'ica' - default is 'pca'")
    print("")
    return()

# set default variable values
usedmask = False
decomptype = 'pca'
pcacomponents = 0.5
icacomponents = None
sigma = 0.0

# parse command line arguments
try:
    opts, args = getopt.gnu_getopt(sys.argv, 'h', ["help", "dmask=", "smooth=", "ncomp=", "type="])
except getopt.GetoptError as err:
    # print(help information and exit:
    print(str(err)) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

# handle required args first
if len(args) < 3:
    print('spatial fit has 2 required arguments - ', len(args) - 1, 'found')
    usage()
    sys.exit()

datafilename=args[1]
outputrootname=args[2]

for o, a in opts:
    if o == "--dmask":
        usedmask = True
        datamaskname = a
        print('using', datamaskname, 'as data mask')
    elif o == "--ncomp":
        inputnum = float(a)
        if inputnum < 1.0:
            pcacomponents = inputnum
            icacomponenets = None
        else:
            pcacomponents = int(a)
            icacomponents = pcacomponents
    elif o == "--smooth":
        sigma = float(a)
        print('will smooth data with a', sigma, 'mm kernel')
    elif o == "--type":
        decomptype = a
        if decomptype != 'pca' and decomptype != 'ica':
            print('illegal decomposition mode - must be pca or ica')
            sys.exit()
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    else:
        assert False, "unhandled option"


print('Will perform', decomptype, 'analysis')
    

# read in data
print("reading in data arrays")
datafile_img = nib.load(datafilename)
datafile_data = datafile_img.get_data()
datafile_hdr = datafile_img.get_header()
datafiledims = datafile_hdr['dim']
datafilesizes = datafile_hdr['pixdim']

if usedmask:
    datamask_img = nib.load(datamaskname)
    datamask_data = datamask_img.get_data()
    datamask_hdr = datamask_img.get_header()
    datamaskdims = datamask_hdr['dim']
    datamasksizes = datamask_hdr['pixdim']

xsize, ysize, numslices, timepoints = tide.parseniftidims(datafiledims)
xdim, ydim, slicethickness, tr = tide.parseniftisizes(datafilesizes)
    
# check dimensions
if usedmask:
    print("checking mask dimensions")
    if not tide.checkspacematch(datafiledims, datamaskdims):
        print('input mask spatial dimensions do not match image')
        exit()
    if not tide.checktimematch(datafiledims, datamaskdims, 0, 0):
        print('input mask time dimension does not match image')
        exit()

# smooth the data
if sigma > 0.0:
    print('smoothing data')
    for i in range(timepoints):
        datafile_data[:, :, :, i] = tide.ssmooth(xdim, ydim, slicethickness, sigma, datafile_data[:, :, :, i])

# allocating arrays
print("reshaping and masking arrays")
numspatiallocs = int(xsize) * int(ysize) * int(numslices)
rs_datafile = datafile_data.reshape((numspatiallocs, timepoints))
if usedmask:
    bin_datamask = where(datamask_data.reshape((numspatiallocs, timepoints)) > 0.9, 1.0, 0.0)
else:
    bin_datamask = np.ones((numspatiallocs, timepoints), dtype='float')
#bin_datamask = where(rs_datamask > 0.9, 1.0, 0.0)

# mask everything
print('masking data')
rs_datafile *= bin_datamask

# now perform the decomposition
if decomptype == 'ica':
    print('performing ica decomposition')
    if icacomponents is None:
        print('will return all significant components')
    else:
        print('will return', icacomponents, 'components')
    thefit = FastICA(n_components=icacomponents).fit(np.transpose(rs_datafile))  # Reconstruct signals
    if icacomponents is None:
        decompdata = np.transpose(thefit.components_[:])
        print(decompdata.shape[1], 'components found')
    else:
        decompdata = np.transpose(thefit.components_[0:icacomponents])
        print('returning first', decompdata.shape[1], 'components found')
    tide.writenpvecs(100.0 * thefit.explained_variance_ratio_, outputrootname + '_explained_variance_pct.txt')
else:
    print('performing pca decomposition')
    if pcacomponents < 1.0:
        print('will return the components accounting for', pcacomponents * 100.0, '% of the variance')
    else:
        print('will return', pcacomponents, 'components')
    thefit = PCA(n_components=pcacomponents).fit(np.transpose(rs_datafile))
    if pcacomponents < 1.0:
        decompdata = np.transpose(thefit.components_[:])
        print('returning', decompdata.shape[1], 'components')
    else:
        decompdata = np.transpose(thefit.components_[0:pcacomponents])
    print('variance explained by component:', 100.0 * thefit.explained_variance_ratio_)
    tide.writenpvecs(100.0 * thefit.explained_variance_ratio_, outputrootname + '_explained_variance_pct.txt')

numcomponents = decompdata.shape[1]
theheader = datafile_hdr
theheader['dim'][4] = numcomponents

# write out the data files
print("writing nifti series")
tide.savetonifti(decompdata.reshape((xsize, ysize, numslices, numcomponents)), datafile_hdr, datafilesizes, outputrootname + '_components')
